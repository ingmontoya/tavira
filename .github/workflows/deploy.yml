name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_IMAGE_PHP: ingmontoyav/tavira-app
  DOCKER_IMAGE_NUXT: ingmontoyav/tavira-nuxt
  DEPLOYMENT_NAME: tavira-app
  K8S_NAMESPACE: default

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3Ô∏è‚É£ Login Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4Ô∏è‚É£ Extract version
      - name: Extract version from commit
        id: version
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "tag=v$(date +%Y%m%d)-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      # 5Ô∏è‚É£ Build & push PHP/FPM image
      - name: Build & Push PHP Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: ./docker/Dockerfile.php
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_PHP }}:latest
            ${{ env.DOCKER_IMAGE_PHP }}:${{ steps.version.outputs.tag }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_PHP }}:latest
          cache-to: type=inline

      # 6Ô∏è‚É£ Build & push Nuxt image
      - name: Build & Push Nuxt Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NUXT }}:latest
            ${{ env.DOCKER_IMAGE_NUXT }}:${{ steps.version.outputs.tag }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_NUXT }}:latest
          cache-to: type=inline

      # 7Ô∏è‚É£ Success notification with deployment instructions
      - name: Build successful - Ready for deployment
        run: |
          echo "‚úÖ Docker images built and pushed successfully!"
          echo ""
          echo "üì¶ Images ready:"
          echo "  - PHP: ${{ env.DOCKER_IMAGE_PHP }}:${{ steps.version.outputs.tag }}"
          echo "  - Nuxt: ${{ env.DOCKER_IMAGE_NUXT }}:${{ steps.version.outputs.tag }}"
          echo ""
          echo "üöÄ To deploy to Kubernetes, run these commands on your machine:"
          echo ""
          echo "# Update the deployment with new image"
          echo "kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \\"
          echo "  php-fpm=${{ env.DOCKER_IMAGE_PHP }}:${{ steps.version.outputs.tag }}"
          echo ""
          echo "# Wait for rollout to complete"
          echo "kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=10m"
          echo ""
          echo "# Run post-deployment tasks"
          echo "POD=\$(kubectl get pods -l app=${{ env.DEPLOYMENT_NAME }} -o jsonpath='{.items[0].metadata.name}')"
          echo "kubectl exec \$POD -c php-fpm -- php artisan config:clear"
          echo "kubectl exec \$POD -c php-fpm -- php artisan config:cache"
          echo "kubectl exec \$POD -c php-fpm -- php artisan migrate --force"
          echo "kubectl exec \$POD -c php-fpm -- php artisan tenants:migrate --force"
          echo ""
          echo "üí° Or use the quick deploy script: ./scripts/deploy.sh ${{ steps.version.outputs.tag }}"
