name: Deploy to Staging

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  DOCKER_IMAGE_PHP: ingmontoyav/tavira-app
  DOCKER_IMAGE_NUXT: ingmontoyav/tavira-nuxt
  DEPLOYMENT_NAME: tavira-app-staging
  QUEUE_WORKER_DEPLOYMENT: tavira-queue-worker-staging
  K8S_NAMESPACE: staging

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 1Ô∏è‚É£ Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3Ô∏è‚É£ Login Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4Ô∏è‚É£ Extract version for staging
      - name: Extract version from commit
        id: version
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "tag=staging-v$(date +%Y%m%d)-${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      # 5Ô∏è‚É£ Build & push PHP/FPM image for staging
      - name: Build & Push PHP Docker image (staging)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.php
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_PHP }}:staging
            ${{ env.DOCKER_IMAGE_PHP }}:${{ steps.version.outputs.tag }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_PHP }}:staging
          cache-to: type=inline
          build-args: |
            BUILD_ENV=staging

      # 6Ô∏è‚É£ Build & push Nuxt image for staging
      - name: Build & Push Nuxt Docker image (staging)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NUXT }}:staging
            ${{ env.DOCKER_IMAGE_NUXT }}:${{ steps.version.outputs.tag }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE_NUXT }}:staging
          cache-to: type=inline
          build-args: |
            BUILD_ENV=staging

      # 7Ô∏è‚É£ Configure kubectl
      - name: Set up kubectl
        uses: azure/k8s-set-context@v4
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      # 8Ô∏è‚É£ Verify cluster connection
      - name: Verify cluster connection
        run: |
          echo "üîç Checking cluster connection..."
          kubectl cluster-info
          kubectl get nodes
          echo "‚úÖ Connected to cluster"

      # 9Ô∏è‚É£ Update main app deployment
      - name: Update Kubernetes deployment (main app)
        run: |
          echo "üîÑ Updating staging app deployment to ${{ steps.version.outputs.tag }}..."
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            php-fpm=${{ env.DOCKER_IMAGE_PHP }}:${{ steps.version.outputs.tag }} \
            -n ${{ env.K8S_NAMESPACE }} \
            --record
          echo "‚úÖ Main app deployment updated"

      # üîü Update queue worker deployment
      - name: Update Kubernetes deployment (queue worker)
        run: |
          echo "üîÑ Updating staging queue worker deployment to ${{ steps.version.outputs.tag }}..."
          kubectl set image deployment/${{ env.QUEUE_WORKER_DEPLOYMENT }} \
            queue-worker=${{ env.DOCKER_IMAGE_PHP }}:${{ steps.version.outputs.tag }} \
            -n ${{ env.K8S_NAMESPACE }} \
            --record
          echo "‚úÖ Queue worker deployment updated"

      # 1Ô∏è‚É£1Ô∏è‚É£ Wait for main app rollout
      - name: Wait for main app rollout to complete
        run: |
          echo "‚è≥ Waiting for main app rollout to complete..."
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=10m
          echo "‚úÖ Main app rollout completed successfully"

      # 1Ô∏è‚É£2Ô∏è‚É£ Wait for queue worker rollout
      - name: Wait for queue worker rollout to complete
        run: |
          echo "‚è≥ Waiting for queue worker rollout to complete..."
          kubectl rollout status deployment/${{ env.QUEUE_WORKER_DEPLOYMENT }} \
            -n ${{ env.K8S_NAMESPACE }} \
            --timeout=10m
          echo "‚úÖ Queue worker rollout completed successfully"

      # 1Ô∏è‚É£3Ô∏è‚É£ Run post-deployment tasks
      - name: Run post-deployment tasks
        continue-on-error: true
        run: |
          echo "üõ†Ô∏è Running post-deployment tasks for staging..."

          # Wait a bit for pods to stabilize after rollout
          sleep 10

          # Get running pod name (using correct label)
          POD=$(kubectl get pods -n ${{ env.K8S_NAMESPACE }} \
            -l app=tavira-staging \
            --field-selector=status.phase=Running \
            -o jsonpath='{.items[0].metadata.name}')

          echo "üì¶ Pod: $POD"

          if [ -z "$POD" ]; then
            echo "‚ö†Ô∏è  No running pod found with label app=tavira-staging"
            echo "Available pods:"
            kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=tavira-staging
            echo "‚ö†Ô∏è  Skipping post-deployment tasks"
            exit 0
          fi

          # Verify application is ready
          echo "  ‚Üí Checking application files..."
          kubectl exec -n ${{ env.K8S_NAMESPACE }} $POD -c php-fpm -- ls -la /var/www/html/artisan 2>/dev/null || {
            echo "‚ö†Ô∏è  Application files not ready yet"
            exit 0
          }

          # Verify database connectivity before running migrations
          echo "  ‚Üí Verifying database connectivity..."
          if ! kubectl exec -n ${{ env.K8S_NAMESPACE }} $POD -c php-fpm -- php artisan db:show 2>/dev/null; then
            echo "‚ö†Ô∏è  Database not ready, skipping migrations"
            echo "‚ÑπÔ∏è  You can run migrations manually later with:"
            echo "    kubectl exec $POD -c php-fpm -- php artisan migrate --force"
            exit 0
          fi

          echo "  ‚úÖ Database connection verified"

          # Clear and cache config
          echo "  ‚Üí Clearing config cache..."
          kubectl exec -n ${{ env.K8S_NAMESPACE }} $POD -c php-fpm -- php artisan config:clear 2>/dev/null || {
            echo "    ‚ö†Ô∏è  Config clear failed (not critical)"
          }

          echo "  ‚Üí Caching config..."
          kubectl exec -n ${{ env.K8S_NAMESPACE }} $POD -c php-fpm -- php artisan config:cache 2>/dev/null || {
            echo "    ‚ö†Ô∏è  Config cache failed (not critical)"
          }

          # Note: route:cache is skipped for multitenancy apps to avoid route conflicts
          # Routes are dynamically loaded per tenant

          echo "  ‚Üí Caching views..."
          kubectl exec -n ${{ env.K8S_NAMESPACE }} $POD -c php-fpm -- php artisan view:cache 2>/dev/null || {
            echo "    ‚ö†Ô∏è  View cache failed (views may not be compiled yet - not critical)"
          }

          # Run migrations
          echo "  ‚Üí Running central migrations..."
          kubectl exec -n ${{ env.K8S_NAMESPACE }} $POD -c php-fpm -- php artisan migrate --force || {
            echo "‚ö†Ô∏è  Migrations failed, but continuing..."
          }

          echo "  ‚Üí Running tenant migrations..."
          kubectl exec -n ${{ env.K8S_NAMESPACE }} $POD -c php-fpm -- php artisan tenants:migrate --force || {
            echo "‚ö†Ô∏è  Tenant migrations failed, but continuing..."
          }

          echo "‚úÖ Post-deployment tasks completed"

      # 1Ô∏è‚É£4Ô∏è‚É£ Show deployment status
      - name: ‚úÖ Deployment complete
        run: |
          echo "============================================="
          echo "‚úÖ Staging deployment completed successfully!"
          echo "============================================="
          echo ""
          echo "üì¶ Deployed version: ${{ steps.version.outputs.tag }}"
          echo "üåø Branch: develop"
          echo "üîñ Commit: ${{ steps.version.outputs.short_sha }}"
          echo ""
          echo "üìä Current deployment status:"
          kubectl get deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
          kubectl get deployment ${{ env.QUEUE_WORKER_DEPLOYMENT }} -n ${{ env.K8S_NAMESPACE }}
          echo ""
          echo "üìã Running pods:"
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=tavira-staging
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=tavira-queue-worker-staging
          echo ""
          echo "üåê Staging environment available at:"
          echo "   https://staging.tavira.com.co"
          echo "============================================="

      # 1Ô∏è‚É£5Ô∏è‚É£ Verify deployment health
      - name: Verify deployment health
        run: |
          echo "üîç Verifying deployment health..."

          # Check if pods are running
          RUNNING_PODS=$(kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=tavira-staging --field-selector=status.phase=Running -o json | jq '.items | length')

          if [ "$RUNNING_PODS" -eq 0 ]; then
            echo "‚ùå No running pods found!"
            kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=tavira-staging
            kubectl describe deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
            exit 1
          fi

          echo "‚úÖ $RUNNING_PODS pod(s) running successfully"

      # 1Ô∏è‚É£6Ô∏è‚É£ Notify on failure
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Staging deployment failed!"
          echo "Check the logs above for details."
          echo ""
          echo "Current pods:"
          kubectl get pods -n ${{ env.K8S_NAMESPACE }} -l app=tavira-staging
          echo ""
          echo "Deployment details:"
          kubectl describe deployment ${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
          echo ""
          echo "Recent events:"
          kubectl get events -n ${{ env.K8S_NAMESPACE }} --sort-by='.lastTimestamp' | tail -20
